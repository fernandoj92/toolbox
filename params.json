{"name":"AMIDST Toolbox 1.0","tagline":"A Java Toolbox for Analysis of MassIve Data STreams using Probabilistic Graphical Models","body":"## Dynamic Bayesian networks: code Examples<a name=\"documentation\"></a>\r\n\r\n   * [Dynamic Data Streams](#dynamicdatastreamsexample)\r\n   * [Dynamic Random Variables](#dynamicvariablesexample)\r\n   * [Dynamic Bayesian Networks](#dynamicbnexample)\r\n       * [Creating Bayesian Networks](#dynamicbnnohiddenexample)\r\n       * [Creating Bayesian Networks with latent variables](#dynamicbnhiddenexample)\r\n       * [Modifying Bayesian Networks](#dynamicbnmodifyexample)\r\n   * [Sampling from Dynamic Bayesian Networks](#sampledynamicbn)\r\n   * [Inference Algorithms for Dynamic Bayesian Networks](#dynamicinferenceexample)\r\n       * [The Dynamic MAP Inference](#dynamicmap)\r\n       * [The Dynamic Variational Message Passing](#dynamicvmp)\r\n       * [The Dynamic Importance Sampling](#dynamicis)\r\n   * [Dynamic Learning Algorithms](#dynamiclearningexample)\r\n       * [Maximum Likelihood for DBNs](#dynamicml)\r\n       * [Streaming Variational Bayes for DBNs](#dynamicsvb)\r\n\r\n\r\n## Dynamic Data Streams<a name=\"dynamicdatastreamsexample\"></a>\r\n  \r\nIn this example we show how to use the main features of a *DataStream* object. More precisely,  we show  how to load a dynamic data stream and how to iterate over the *DynamicDataInstance* objects.\r\n\r\n```java\r\n//Open the data stream using the class DynamicDataStreamLoader\r\nDataStream<DynamicDataInstance> data = DynamicDataStreamLoader.loadFromFile(\"datasets/dynamicNB-samples.arff\");\r\n\r\n//Access the attributes defining the data stream\r\nSystem.out.println(\"Attributes defining the data set\");\r\nfor (Attribute attribute : data.getAttributes()) {\r\n    System.out.println(attribute.getName());\r\n}\r\nAttribute classVar = data.getAttributes().getAttributeByName(\"ClassVar\");\r\n\r\n//Iterate over dynamic data instances\r\nSystem.out.println(\"1. Iterating over samples using a for loop\");\r\nfor (DynamicDataInstance dataInstance : data) {\r\n    System.out.println(\"SequenceID = \"+dataInstance.getSequenceID()+\", TimeID = \"+dataInstance.getTimeID());\r\n    System.out.println(\"The value of attribute A for the current data instance is: \" +\r\n    \tdataInstance.getValue(classVar));\r\n}\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n## Dynamic Random Variables<a name=\"dynamicvariablesexample\"></a>\r\n\r\nThis example show the basic functionalities related to dynamic variables.\r\n\r\n```java\r\n//Create an empty DynamicVariables object\r\nDynamicVariables variables = new DynamicVariables();\r\n\r\n//Invoke the \"new\" methods of the object DynamicVariables to create new dynamic variables.\r\n\r\n//Create a Gaussian dynamic variables\r\nVariable gaussianVar = variables.newGaussianDynamicVariable(\"GaussianVar\");\r\n\r\n//Create a Multinomial dynamic variable with two states\r\nVariable multinomialVar = variables.newMultinomialDynamicVariable(\"MultinomialVar\", 2);\r\n\r\n//Create a Multinomial dynamic variable with two states: TRUE and FALSE\r\nVariable multinomialVar2 = variables.newMultinomialDynamicVariable(\"MultinomialVar2\", Arrays.asList(\"TRUE, FALSE\"));\r\n\r\n//All dynamic Variables have an interface variable\r\nVariable gaussianVarInt = gaussianVar.getInterfaceVariable();\r\nVariable multinomialVarInt = multinomialVar.getInterfaceVariable();\r\n\r\n//Get the \"main\" Variable associated with each interface variable through the DynamicVariable object\r\nVariable mainMultinomialVar = variables.getVariableFromInterface(multinomialVarInt);\r\n\r\n//Check whether a variable is an interface variable\r\nSystem.out.println(\"Is Variable \"+gaussianVar.getName()+\" an interface variable? \"\r\n                +gaussianVar.isInterfaceVariable());\r\nSystem.out.println(\"Is Variable \"+gaussianVarInt.getName()+\" an interface variable? \"\r\n                +gaussianVarInt.isInterfaceVariable());\r\n\r\n//Check whether a variable is a dynamic variable\r\nSystem.out.println(\"Is Variable \"+multinomialVar.getName()+\" a dynamic variable? \"\r\n                +gaussianVar.isDynamicVariable());\r\n```\r\n\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n\r\n## Dynamic Bayesian Networks<a name=\"dynamicbnexample\"></a>\r\n\r\n### Creating dynamic Bayesian networks<a name=\"bnnohiddenexample\"></a>\r\n\r\nThis example creates a dynamic BN, from a dynamic data stream, with randomly generated probability distributions, then saves it to a file.\r\n\r\n```java\r\n//Open the data stream using the static class DynamicDataStreamLoader\r\nDataStream<DynamicDataInstance> data = DynamicDataStreamLoader.loadFromFile(\r\n                \"datasets/syntheticDataDiscrete.arff\");\r\n\r\n/**\r\n* 1. Once the data is loaded, we create a random variable for each of the attributes (i.e. data columns)\r\n* in our data.\r\n*\r\n* 2. {@link DynamicVariables} is the class for doing that. It takes a list of Attributes and internally creates\r\n* all the variables. We create the variables using DynamicVariables class to guarantee that each variable\r\n* has a different ID number and make it transparent for the user. Each random variable has an associated\r\n* interface variable.\r\n*\r\n* 3. We can extract the Variable objects by using the method getVariableByName();\r\n*/\r\nDynamicVariables dynamicVariables = new DynamicVariables(data.getAttributes());\r\nDynamicDAG dynamicDAG = new DynamicDAG(dynamicVariables);\r\n\r\nVariable A = dynamicVariables.getVariableByName(\"A\");\r\nVariable B = dynamicVariables.getVariableByName(\"B\");\r\nVariable C = dynamicVariables.getVariableByName(\"C\");\r\nVariable D = dynamicVariables.getVariableByName(\"D\");\r\nVariable E = dynamicVariables.getVariableByName(\"E\");\r\nVariable G = dynamicVariables.getVariableByName(\"G\");\r\n\r\nVariable A_Interface = dynamicVariables.getInterfaceVariable(A);\r\nVariable B_Interface = dynamicVariables.getInterfaceVariable(B);\r\n\r\n//Note that C_Interface and D_Interface are also created although they will not be used\r\n//(we will not add temporal dependencies)\r\n\r\nVariable E_Interface = dynamicVariables.getInterfaceVariable(E);\r\nVariable G_Interface = dynamicVariables.getInterfaceVariable(G);\r\n\r\n// Example of the dynamic DAG structure\r\n// Time 0: Parents at time 0 are automatically created when adding parents at time T\r\ndynamicDAG.getParentSetTimeT(B).addParent(A);\r\ndynamicDAG.getParentSetTimeT(C).addParent(A);\r\ndynamicDAG.getParentSetTimeT(D).addParent(A);\r\ndynamicDAG.getParentSetTimeT(E).addParent(A);\r\ndynamicDAG.getParentSetTimeT(G).addParent(A);\r\ndynamicDAG.getParentSetTimeT(A).addParent(A_Interface);\r\ndynamicDAG.getParentSetTimeT(B).addParent(B_Interface);\r\ndynamicDAG.getParentSetTimeT(E).addParent(E_Interface);\r\ndynamicDAG.getParentSetTimeT(G).addParent(G_Interface);\r\n\r\nSystem.out.println(dynamicDAG.toString());\r\n\r\n/**\r\n* 1. We now create the Dynamic Bayesian network from the previous Dynamic DAG.\r\n*\r\n* 2. The DBN object is created from the DynamicDAG. It automatically looks at the distribution type\r\n* of each variable and their parents to initialize the Distributions objects that are stored\r\n* inside (i.e. Multinomial, Normal, CLG, etc). The parameters defining these distributions are\r\n* properly initialized.\r\n*\r\n* 3. The network is printed and we can have a look at the kind of distributions stored in the DBN object.\r\n*/\r\nDynamicBayesianNetwork dbn = new DynamicBayesianNetwork(dynamicDAG);\r\nSystem.out.printf(dbn.toString());\r\n\r\n/**\r\n* Finally teh Bayesian network is saved to a file.\r\n*/\r\nDynamicBayesianNetworkWriter.saveToFile(dbn, \"networks/DBNExample.bn\");\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n\r\n### Creating Dynamic Bayesian Networks with Latent Variables <a name=\"dynamicbnhiddenexample\"></a>\r\n\r\nThis example shows how to create a BN model with hidden variables. We simply create a BN for clustering, i.e., a naive Bayes like structure with a single hidden variable acting as parant of all the remaining observable variables.\r\n \r\n```java\r\n//Open the data stream using DynamicDataStreamLoader\r\nDataStream<DynamicDataInstance> data = DynamicDataStreamLoader.loadFromFile(\r\n                \"datasets/syntheticDataDiscrete.arff\");\r\n\r\n/**\r\n* 1. Once the data is loaded, create a random variable for each of the attributes (i.e. data columns)\r\n*\r\n* 2. {@link DynamicVariables} is the class for doing that. It takes a list of Attributes and internally creates\r\n* all the variables. We create the variables using DynamicVariables class to guarantee that each variable\r\n* has a different ID number and make it transparent for the user. Each random variable has an associated\r\n* interface variable.\r\n*\r\n* 3. Extract the Variable objects by using the method getVariableByName()\r\n*/\r\nDynamicVariables dynamicVariables = new DynamicVariables(data.getAttributes());\r\n\r\nVariable A = dynamicVariables.getVariableByName(\"A\");\r\nVariable B = dynamicVariables.getVariableByName(\"B\");\r\nVariable C = dynamicVariables.getVariableByName(\"C\");\r\nVariable D = dynamicVariables.getVariableByName(\"D\");\r\nVariable E = dynamicVariables.getVariableByName(\"E\");\r\nVariable G = dynamicVariables.getVariableByName(\"G\");\r\n\r\nVariable A_Interface = dynamicVariables.getInterfaceVariable(A);\r\nVariable B_Interface = dynamicVariables.getInterfaceVariable(B);\r\n\r\n//Note that C_Interface and D_Interface are also created although they will not be used\r\n//(we will not add temporal dependencies)\r\n\r\nVariable E_Interface = dynamicVariables.getInterfaceVariable(E);\r\nVariable G_Interface = dynamicVariables.getInterfaceVariable(G);\r\n\r\n/*\r\n* Add a hidden multinomial variable (with 2 states) as parent of all variables except A\r\n*/\r\n\r\nVariable H = dynamicVariables.newMultinomialDynamicVariable(\"H\", 2);\r\nVariable H_Interface = dynamicVariables.getInterfaceVariable(H);\r\n\r\n/**\r\n* Once we have defined your {@link DynamicVariables} object, including the latent variable,\r\n* the next step is to create a DynamicDAG structure over this set of variables.\r\n*/\r\n\r\nDynamicDAG dynamicDAG = new DynamicDAG(dynamicVariables);\r\n        \r\n/*\r\n* 1. To add parents to each variable, we first recover the ParentSet object by the method\r\n* getParentSet(Variable var) and then call the method addParent(Variable var).\r\n*\r\n* 2. We just assign the hidden variable as parent of all the other variables (except A), and\r\n* link it temporally.\r\n*/\r\n\r\n// Time 0: Parents at time 0 are automatically created when adding parents at time T.\r\ndynamicDAG.getParentSetsTimeT().stream()\r\n        .filter(pset -> pset.getMainVar().getVarID() != A.getVarID())\r\n        .filter(pset -> pset.getMainVar().getVarID() != H.getVarID())\r\n        .forEach(pset -> {\r\n            pset.addParent(A);\r\n            pset.addParent(H);\r\n        });\r\ndynamicDAG.getParentSetTimeT(A).addParent(A_Interface);\r\ndynamicDAG.getParentSetTimeT(B).addParent(B_Interface);\r\ndynamicDAG.getParentSetTimeT(E).addParent(E_Interface);\r\ndynamicDAG.getParentSetTimeT(G).addParent(G_Interface);\r\ndynamicDAG.getParentSetTimeT(H).addParent(H_Interface);\r\n\r\nSystem.out.println(dynamicDAG.toString());\r\n\r\n/**\r\n* 1. Create the Dynamic Bayesian network from the previous Dynamic DAG.\r\n*\r\n* 2. The DBN object is created from the DynamicDAG. It automatically looks at the distribution type\r\n* of each variable and their parents to initialize the Distributions objects that are stored\r\n* inside (i.e. Multinomial, Normal, CLG, etc). The parameters defining these distributions are\r\n* properly initialized.\r\n*\r\n* 3. The network is printed and we can have a look at the kind of distributions stored in the DBN object.\r\n*/\r\nDynamicBayesianNetwork dbn = new DynamicBayesianNetwork(dynamicDAG);\r\nSystem.out.printf(dbn.toString());\r\n\r\n/**\r\n* Finally the created Dynamic Bayesian network is saved to a file.\r\n*/\r\nDynamicBayesianNetworkWriter.saveToFile(dbn, \"networks/DBNExample.bn\");\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n\r\n### Modifying Dynamic Bayesian Networks <a name=\"dynamicbnmodifyexample\"></a>\r\n\r\nThis example shows how to access and modify the conditional probabilities of a Dynamic Bayesian network model.\r\n\r\n```java\r\n/**\r\n* 1. Load the data stream and create the dynamic DAG.\r\n*/\r\nDataStream<DynamicDataInstance> data = DynamicDataStreamLoader.loadFromFile(\r\n                \"datasets/syntheticDataDiscrete.arff\");\r\n        \r\nDynamicVariables dynamicVariables = new DynamicVariables(data.getAttributes());\r\nDynamicDAG dynamicDAG = new DynamicDAG(dynamicVariables);\r\n\r\nVariable A = dynamicVariables.getVariableByName(\"A\");\r\nVariable B = dynamicVariables.getVariableByName(\"B\");\r\nVariable C = dynamicVariables.getVariableByName(\"C\");\r\nVariable D = dynamicVariables.getVariableByName(\"D\");\r\nVariable E = dynamicVariables.getVariableByName(\"E\");\r\nVariable G = dynamicVariables.getVariableByName(\"G\");\r\nVariable A_Interface = dynamicVariables.getInterfaceVariable(A);\r\nVariable B_Interface = dynamicVariables.getInterfaceVariable(B);\r\nVariable E_Interface = dynamicVariables.getInterfaceVariable(E);\r\nVariable G_Interface = dynamicVariables.getInterfaceVariable(G);\r\n        \r\ndynamicDAG.getParentSetTimeT(B).addParent(A);\r\ndynamicDAG.getParentSetTimeT(C).addParent(A);\r\ndynamicDAG.getParentSetTimeT(D).addParent(A);\r\ndynamicDAG.getParentSetTimeT(E).addParent(A);\r\ndynamicDAG.getParentSetTimeT(G).addParent(A);\r\ndynamicDAG.getParentSetTimeT(A).addParent(A_Interface);\r\ndynamicDAG.getParentSetTimeT(B).addParent(B_Interface);\r\ndynamicDAG.getParentSetTimeT(E).addParent(E_Interface);\r\ndynamicDAG.getParentSetTimeT(G).addParent(G_Interface);\r\n        \r\nDynamicBayesianNetwork dbn = new DynamicBayesianNetwork(dynamicDAG);\r\nSystem.out.printf(dbn.toString());\r\n\r\n/*\r\n* 2. Modify the conditional probability distributions (CPDs) to new assigned values.\r\n* IMPORTANT: The parents are indexed according to Koller (Chapter 10. Pag. 358). Example:\r\n*  Parents: A = {A0,A1} and B = {B0,B1,B2}.\r\n*  NumberOfPossibleAssignments = 6\r\n*  Index   A    B\r\n*   0     A0   B0\r\n*   1     A1   B1\r\n*   2     A0   B2\r\n*   3     A1   B0\r\n*   4     A0   B1\r\n*   5     A1   B2\r\n*/\r\n\r\n// *********************** Modifiy the CPDs at TIME 0 ***********************************\r\n\r\n// Variable A\r\nMultinomial distA_Time0 = dbn.getConditionalDistributionTime0(A);\r\ndistA_Time0.setProbabilities(new double[]{0.3, 0.7});\r\n\r\n// Variable B\r\nMultinomial_MultinomialParents distB_Time0 = dbn.getConditionalDistributionTime0(B);\r\ndistB_Time0.getMultinomial(0).setProbabilities(new double[]{0.4, 0.1, 0.5});\r\ndistB_Time0.getMultinomial(1).setProbabilities(new double[]{0.2, 0.5, 0.3});\r\n\r\n// Variable C\r\nMultinomial_MultinomialParents distC_Time0 = dbn.getConditionalDistributionTime0(C);\r\ndistC_Time0.getMultinomial(0).setProbabilities(new double[]{0.4, 0.6});\r\ndistC_Time0.getMultinomial(1).setProbabilities(new double[]{0.2, 0.8});\r\n\r\n// Variable D\r\nMultinomial_MultinomialParents distD_Time0 = dbn.getConditionalDistributionTime0(D);\r\ndistD_Time0.getMultinomial(0).setProbabilities(new double[]{0.7, 0.3});\r\ndistD_Time0.getMultinomial(1).setProbabilities(new double[]{0.1, 0.9});\r\n\r\n// Variable E\r\nMultinomial_MultinomialParents distE_Time0 = dbn.getConditionalDistributionTime0(E);\r\ndistE_Time0.getMultinomial(0).setProbabilities(new double[]{0.8, 0.2});\r\ndistE_Time0.getMultinomial(1).setProbabilities(new double[]{0.1, 0.9});\r\n\r\n// Variable G\r\nMultinomial_MultinomialParents distG_Time0 = dbn.getConditionalDistributionTime0(G);\r\ndistG_Time0.getMultinomial(0).setProbabilities(new double[]{0.6, 0.4});\r\ndistG_Time0.getMultinomial(1).setProbabilities(new double[]{0.7, 0.3});\r\n\r\n// ************************ Modifiy the CPDs at TIME T ***********************************\r\n\r\n// Variable A\r\nMultinomial_MultinomialParents distA_TimeT = dbn.getConditionalDistributionTimeT(A);\r\ndistA_TimeT.getMultinomial(0).setProbabilities(new double[]{0.15, 0.85});\r\ndistA_TimeT.getMultinomial(1).setProbabilities(new double[]{0.1, 0.9});\r\n\r\n// Variable B\r\nMultinomial_MultinomialParents distB_TimeT = dbn.getConditionalDistributionTimeT(B);\r\ndistB_TimeT.getMultinomial(0).setProbabilities(new double[]{0.1, 0.2, 0.7});\r\ndistB_TimeT.getMultinomial(1).setProbabilities(new double[]{0.6, 0.1, 0.3});\r\ndistB_TimeT.getMultinomial(2).setProbabilities(new double[]{0.3, 0.4, 0.3});\r\ndistB_TimeT.getMultinomial(3).setProbabilities(new double[]{0.2, 0.1, 0.7});\r\ndistB_TimeT.getMultinomial(4).setProbabilities(new double[]{0.5, 0.1, 0.4});\r\ndistB_TimeT.getMultinomial(5).setProbabilities(new double[]{0.1, 0.1, 0.8});\r\n\r\n// Variable C: equals to the distribution at time 0 (C does not have temporal clone)\r\nMultinomial_MultinomialParents distC_TimeT = dbn.getConditionalDistributionTimeT(C);\r\ndistC_TimeT.getMultinomial(0).setProbabilities(new double[]{0.4, 0.6});\r\ndistC_TimeT.getMultinomial(1).setProbabilities(new double[]{0.2, 0.8});\r\n\r\n// Variable D: equals to the distribution at time 0 (D does not have temporal clone)\r\nMultinomial_MultinomialParents distD_TimeT = dbn.getConditionalDistributionTimeT(D);\r\ndistD_TimeT.getMultinomial(0).setProbabilities(new double[]{0.7, 0.3});\r\ndistD_TimeT.getMultinomial(1).setProbabilities(new double[]{0.1, 0.9});\r\n\r\n// Variable E\r\nMultinomial_MultinomialParents distE_TimeT = dbn.getConditionalDistributionTimeT(E);\r\ndistE_TimeT.getMultinomial(0).setProbabilities(new double[]{0.3, 0.7});\r\ndistE_TimeT.getMultinomial(1).setProbabilities(new double[]{0.6, 0.4});\r\ndistE_TimeT.getMultinomial(2).setProbabilities(new double[]{0.7, 0.3});\r\ndistE_TimeT.getMultinomial(3).setProbabilities(new double[]{0.9, 0.1});\r\n\r\n// Variable G\r\nMultinomial_MultinomialParents distG_TimeT = dbn.getConditionalDistributionTimeT(G);\r\ndistG_TimeT.getMultinomial(0).setProbabilities(new double[]{0.2, 0.8});\r\ndistG_TimeT.getMultinomial(1).setProbabilities(new double[]{0.5, 0.5});\r\ndistG_TimeT.getMultinomial(2).setProbabilities(new double[]{0.3, 0.7});\r\ndistG_TimeT.getMultinomial(3).setProbabilities(new double[]{0.8, 0.2});\r\n\r\n/*\r\n* Print the new modeified DBN\r\n*/\r\nSystem.out.println(dbn.toString());\r\n\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n## Sampling from Dynamic Bayesian Networks <a name=\"sampledynamicbn\"></a>\r\n\r\nThis example shows how to use the DynamicBayesianNetworkSampler class to randomly generate a dynamic data stream from a given Dynamic Bayesian network.\r\n\r\n```java\r\n//Randomly generate a DBN with 3 continuous and 3 discrete variables with 2 states\r\nDynamicBayesianNetworkGenerator dbnGenerator = new DynamicBayesianNetworkGenerator();\r\ndbnGenerator.setNumberOfContinuousVars(3);\r\ndbnGenerator.setNumberOfDiscreteVars(3);\r\ndbnGenerator.setNumberOfStates(2);\r\n\r\n//Create a Naive Bayes like structure with temporal links in the children (leaves) and 2 states for\r\n//the class variable\r\nDynamicBayesianNetwork network = DynamicBayesianNetworkGenerator.generateDynamicNaiveBayes(\r\n                new Random(0), 2, true);\r\n\r\n//Create the sampler from this network\r\nDynamicBayesianNetworkSampler sampler = new DynamicBayesianNetworkSampler(network);\r\nsampler.setSeed(0);\r\n\r\n//Sample a dataStream of 3 sequences of 1000 samples each\r\nDataStream<DynamicDataInstance> dataStream = sampler.sampleToDataBase(3,1000);\r\n\r\n//Save the created data stream in a file\r\nDataStreamWriter.writeDataToFile(dataStream, \"./datasets/dnb-samples.arff\");\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n## Inference Algorithms for Dynamic Bayesian Networks <a name=\"dynamicinferenceexample\"></a>\r\n\r\n### The Dynamic MAP Inference <a name=\"dynamicmap\"></a>\r\n\r\nThis example shows how to use the Dynamic MAP Inference algorithm.\r\n\r\n```java\r\n//Generate a random DBN model\r\nDynamicBayesianNetworkGenerator.setNumberOfContinuousVars(3);\r\nDynamicBayesianNetworkGenerator.setNumberOfDiscreteVars(5);\r\nDynamicBayesianNetworkGenerator.setNumberOfStates(2);\r\nDynamicBayesianNetworkGenerator.setNumberOfLinks(5);\r\nDynamicBayesianNetwork dynamicBayesianNetwork = DynamicBayesianNetworkGenerator.generateDynamicNaiveBayes(new Random(0), 2, true);\r\n\r\n//Initialize the Dynamic MAP object\r\nint nTimeSteps = 6;\r\neu.amidst.dynamic.inference.DynamicMAPInference dynMAP = new eu.amidst.dynamic.inference.DynamicMAPInference();\r\ndynMAP.setModel(dynamicBayesianNetwork);\r\ndynMAP.setNumberOfTimeSteps(nTimeSteps);\r\n\r\nVariable mapVariable = dynamicBayesianNetwork.getDynamicVariables().getVariableByName(\"ClassVar\");\r\ndynMAP.setMAPvariable(mapVariable);\r\n        \r\n//Generate an evidence for T=0,...,nTimeSteps-1\r\nList<Variable> varsDynamicModel = dynamicBayesianNetwork.getDynamicVariables().getListOfDynamicVariables();\r\n\r\nSystem.out.println(\"DYNAMIC VARIABLES:\");\r\nvarsDynamicModel.forEach(var -> System.out.println(\"Var ID \" + var.getVarID() + \": \" + var.getName()));\r\nSystem.out.println();\r\nint indexVarEvidence1 = 2;\r\nint indexVarEvidence2 = 3;\r\nint indexVarEvidence3 = 4;\r\nVariable varEvidence1 = varsDynamicModel.get(indexVarEvidence1);\r\nVariable varEvidence2 = varsDynamicModel.get(indexVarEvidence2);\r\nVariable varEvidence3 = varsDynamicModel.get(indexVarEvidence3);\r\n\r\nList<Variable> varsEvidence = new ArrayList<>(3);\r\nvarsEvidence.add(0,varEvidence1);\r\nvarsEvidence.add(1,varEvidence2);\r\nvarsEvidence.add(2,varEvidence3);\r\n\r\ndouble varEvidenceValue;\r\n\r\nRandom random = new Random(4634);\r\n\r\nList<DynamicAssignment> evidence = new ArrayList<>(nTimeSteps);\r\n\r\nfor (int t = 0; t < nTimeSteps; t++) {\r\n   HashMapDynamicAssignment dynAssignment = new HashMapDynamicAssignment(varsEvidence.size());\r\n\r\n   for (int i = 0; i < varsEvidence.size(); i++) {\r\n\r\n        dynAssignment.setSequenceID(12302253);\r\n        dynAssignment.setTimeID(t);\r\n        Variable varEvidence = varsEvidence.get(i);\r\n\r\n        if (varEvidence.isMultinomial()) {\r\n             varEvidenceValue = random.nextInt(varEvidence1.getNumberOfStates());\r\n        } else {\r\n             varEvidenceValue = -5 + 10 * random.nextDouble();\r\n        }\r\n             dynAssignment.setValue(varEvidence, varEvidenceValue);\r\n        }\r\n        evidence.add(dynAssignment);\r\n    }\r\n    System.out.println(\"EVIDENCE:\");\r\n    evidence.forEach(evid -> {\r\n    System.out.println(\"Evidence at time \" + evid.getTimeID());\r\n    evid.getVariables().forEach(variable -> System.out.println(variable.getName() + \": \" + Integer.toString((int) evid.getValue(variable))));\r\n    System.out.println();\r\n});\r\n        \r\n//Set the evidence and run the inference process\r\ndynMAP.setEvidence(evidence);\r\ndynMAP.runInference(eu.amidst.dynamic.inference.DynamicMAPInference.SearchAlgorithm.IS);\r\n\r\n//Display the results\r\nAssignment MAPestimate = dynMAP.getMAPestimate();\r\ndouble MAPestimateProbability = dynMAP.getMAPestimateProbability();\r\n\r\nSystem.out.println(\"MAP sequence over \" + mapVariable.getName() + \":\");\r\nList<Variable> MAPvarReplications = MAPestimate.getVariables().stream().sorted((var1,var2) -> (var1.getVarID()>var2.getVarID()? 1 : -1)).collect(Collectors.toList());\r\n\r\nStringBuilder sequence = new StringBuilder();\r\nMAPvarReplications.stream().forEachOrdered(var -> sequence.append(Integer.toString((int) MAPestimate.getValue(var)) + \", \"));\r\nSystem.out.println(sequence.toString());\r\nSystem.out.println(\"with probability prop. to: \" + MAPestimateProbability);\r\n```\r\n### The Dynamic Variational Message Passing <a name=\"dynamicvmp\"></a>\r\n\r\nThis example shows how to use the Factored Frontier algorithm with Variational Message Passing for running inference on dynamic Bayesian networks.\r\n\r\n```java\r\n\r\n//Generate a dynamic Bayesian network (NB structure with class and attributes temporally linked)\r\nDynamicBayesianNetworkGenerator.setNumberOfContinuousVars(2);\r\nDynamicBayesianNetworkGenerator.setNumberOfDiscreteVars(5);\r\nDynamicBayesianNetworkGenerator.setNumberOfStates(3);\r\nDynamicBayesianNetwork extendedDBN = DynamicBayesianNetworkGenerator.generateDynamicNaiveBayes(random,2,true);\r\n\r\nSystem.out.println(extendedDBN.toString());\r\n\r\n//Select the target variable for inference, in this case it corresponds to the class variable\r\nVariable classVar = extendedDBN.getDynamicVariables().getVariableByName(\"ClassVar\");\r\n\r\n\r\n//Create a dynamic data stream with 3 sequences for prediction. The class var is made hidden.\r\nDynamicBayesianNetworkSampler dynamicSampler = new DynamicBayesianNetworkSampler(extendedDBN);\r\ndynamicSampler.setHiddenVar(classVar);\r\nDataStream<DynamicDataInstance> dataPredict = dynamicSampler.sampleToDataBase(3,100);\r\n\r\n\r\n//Select VMP with the factored frontier algorithm as the Inference Algorithm\r\nFactoredFrontierForDBN FFalgorithm = new FactoredFrontierForDBN(new VMP());\r\nInferenceEngineForDBN.setInferenceAlgorithmForDBN(FFalgorithm);\r\n\r\n//Set the DBN model\r\nInferenceEngineForDBN.setModel(extendedDBN);\r\n\r\nint time = 0 ;\r\nUnivariateDistribution posterior = null;\r\nfor (DynamicDataInstance instance : dataPredict) {\r\n            \r\n   //The InferenceEngineForDBN must be reset at the beginning of each Sequence.\r\n   if (instance.getTimeID()==0 && posterior != null) {\r\n       InferenceEngineForDBN.reset();\r\n       time=0;\r\n   }\r\n            \r\n   //Set the evidence \r\n   InferenceEngineForDBN.addDynamicEvidence(instance);\r\n\r\n   //Run the inference process\r\n   InferenceEngineForDBN.runInference();\r\n\r\n   //Query the posterior of the target variable\r\n   posterior = InferenceEngineForDBN.getFilteredPosterior(classVar);\r\n\r\n   //Display the output\r\n   System.out.println(\"P(ClassVar|e[0:\"+(time++)+\"]) = \"+posterior);\r\n}\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n### The Dynamic Importance Sampling <a name=\"dynamicis\"></a>\r\n\r\nThis example shows how to use the Factored Frontier algorithm with Importance Sampling for running inference in dynamic Bayesian networks.\r\n\r\n```java\r\n//Generate a dynamic Bayesian network (NB structure with class and attributes temporally linked)\r\nDynamicBayesianNetworkGenerator.setNumberOfContinuousVars(2);\r\nDynamicBayesianNetworkGenerator.setNumberOfDiscreteVars(5);\r\nDynamicBayesianNetworkGenerator.setNumberOfStates(3);\r\nDynamicBayesianNetwork extendedDBN = DynamicBayesianNetworkGenerator.generateDynamicNaiveBayes(random, 2, true);\r\n\r\nSystem.out.println(extendedDBN.toString());\r\n\r\n//Select the target variable for inference, in this case the class variable\r\nVariable classVar = extendedDBN.getDynamicVariables().getVariableByName(\"ClassVar\");\r\n\r\n//Create a dynamic dataset with 3 sequences for prediction. The class var is made hidden.\r\nDynamicBayesianNetworkSampler dynamicSampler = new DynamicBayesianNetworkSampler(extendedDBN);\r\ndynamicSampler.setHiddenVar(classVar);\r\nDataStream<DynamicDataInstance> dataPredict = dynamicSampler.sampleToDataBase(3, 1000);\r\n\r\n//Select IS with the factored frontier algorithm as the Inference Algorithm\r\nImportanceSampling importanceSampling = new ImportanceSampling();\r\nimportanceSampling.setKeepDataOnMemory(true);\r\nFactoredFrontierForDBN FFalgorithm = new FactoredFrontierForDBN(importanceSampling);\r\nInferenceEngineForDBN.setInferenceAlgorithmForDBN(FFalgorithm);\r\n\r\n//Set the DBN model\r\nInferenceEngineForDBN.setModel(extendedDBN);\r\n\r\nint time = 0;\r\nUnivariateDistribution posterior = null;\r\nfor (DynamicDataInstance instance : dataPredict) {\r\n            \r\n    //The InferenceEngineForDBN must be reset at the beginning of each Sequence.\r\n    if (instance.getTimeID() == 0 && posterior != null) {\r\n        InferenceEngineForDBN.reset();\r\n        time = 0;\r\n     }\r\n\r\n    //Set the evidence.\r\n    InferenceEngineForDBN.addDynamicEvidence(instance);\r\n\r\n    //Run inference\r\n    InferenceEngineForDBN.runInference();\r\n\r\n    //Query the posterior of the target variable\r\n    posterior = InferenceEngineForDBN.getFilteredPosterior(classVar);\r\n\r\n    //Display the output\r\n    System.out.println(\"P(ClassVar|e[0:\" + (time++) + \"]) = \" + posterior);\r\n}\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n## Dynamic Learning Algorithms <a name=\"dynamiclearningexample\"></a>\r\n\r\n### Maximum Likelihood for DBNs <a name=\"dynamicml\"></a>\r\n\r\nThis example shows how to learn the parameters of a dynamic Bayesian network using maximum likelihood from a randomly sampled data stream.\r\n\r\n```java\r\n//Generate a dynamic Bayesian network (NB structure with class and attributes temporally linked)\r\nDynamicBayesianNetworkGenerator.setNumberOfContinuousVars(2);\r\nDynamicBayesianNetworkGenerator.setNumberOfDiscreteVars(5);\r\nDynamicBayesianNetworkGenerator.setNumberOfStates(3);\r\nDynamicBayesianNetwork dbnRandom = DynamicBayesianNetworkGenerator.generateDynamicNaiveBayes(random,2,true);\r\n\r\n//Sample dynamic data stream from the created dbn with random parameters\r\nDynamicBayesianNetworkSampler sampler = new DynamicBayesianNetworkSampler(dbnRandom);\r\nsampler.setSeed(0);\r\nDataStream<DynamicDataInstance> data = sampler.sampleToDataBase(3,10000);\r\n\r\n//Set batch size value and the parallel mode\r\nDynamicMaximumLikelihood.setBatchSize(1000);\r\nDynamicMaximumLikelihood.setParallelMode(true);\r\n        \r\n//Learn the DBN parameters with ML from data\r\nDynamicBayesianNetwork dbnLearnt = DynamicMaximumLikelihood.learnDynamic(dbnRandom.getDynamicDAG(), data);\r\n\r\n//We print the learnt DBN model\r\nSystem.out.println(dbnLearnt.toString());        \r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n### Streaming Variational Bayes for DBNs <a name=\"dynamicsvb\"></a>\r\n\r\nThis example shows how to learn the parameters of a dynamic Bayesian network using streaming variational Bayes from a randomly sampled data stream.\r\n\r\n\r\n```java\r\n\r\n//Generate a dynamic Bayesian network (NB structure with class and attributes temporally linked)\r\nDynamicBayesianNetworkGenerator.setNumberOfContinuousVars(2);\r\nDynamicBayesianNetworkGenerator.setNumberOfDiscreteVars(5);\r\nDynamicBayesianNetworkGenerator.setNumberOfStates(3);\r\nDynamicBayesianNetwork dbnRandom = DynamicBayesianNetworkGenerator.generateDynamicNaiveBayes(random,2,true);\r\n\r\n//Sample dynamic data stream from the created dbn with random parameters\r\nDynamicBayesianNetworkSampler sampler = new DynamicBayesianNetworkSampler(dbnRandom);\r\nsampler.setSeed(0);\r\n//Sample 3 sequences of 100K instances\r\nDataStream<DynamicDataInstance> data = sampler.sampleToDataBase(3,10000);\r\n\r\n//Parameter Learning with Streaming variational Bayes\r\nDynamicSVB svb = new DynamicSVB();\r\n        \r\n//Set the desired options for the svb\r\nsvb.setWindowsSize(100);\r\nsvb.setSeed(0);\r\n//If desired, we may also set some options for the VMP\r\nVMP vmp = svb.getDynamicPlateauStructure().getVMPTimeT();\r\nvmp.setOutput(true);\r\nvmp.setTestELBO(true);\r\nvmp.setMaxIter(1000);\r\nvmp.setThreshold(0.0001);\r\n\r\n//Set the dynamicDAG, the data and start learning\r\nsvb.setDynamicDAG(dbnRandom.getDynamicDAG());\r\nsvb.setDataStream(data);\r\nsvb.runLearning();\r\n\r\n//Get the learnt DBN model\r\nDynamicBayesianNetwork dbnLearnt = svb.getLearntDBN();\r\n\r\n//Print the DBN model\r\nSystem.out.println(dbnLearnt.toString());\r\n```\r\n\r\n[[Back to Top]](#documentation)","google":"UA-66233470-1","note":"Don't delete this file! It's used internally to help with page regeneration."}