{"name":"AMIDST Toolbox 1.0","tagline":"A Java Toolbox for Analysis of MassIve Data STreams using Probabilistic Graphical Models","body":"## Code Examples<a name=\"documentation\"></a>\r\n\r\n   * [Dynamic Data Streams](#datastreamsexample)\r\n   * [Random Variables](#variablesexample)\r\n   * [Bayesian Networks](#bnexample)\r\n       * [Creating Bayesian Networks](#bnnohiddenexample)\r\n       * [Creating Bayesian Networks with latent variables](#bnhiddenexample)\r\n       * [Modifying Bayesian Networks](#bnmodifyexample)\r\n   * [I/O Functionality](#ioexample)\r\n       * [I/O of Data Streams](#iodatastreamsexample)\r\n       * [I/O of Bayesian Networks](#iobnsexample)\r\n   * [Inference Algorithms](#inferenceexample)\r\n       * [The Inference Engine](#inferenceengingeexample)\r\n       * [Variational Message Passing](#vmpexample)\r\n       * [Importance Sampling](#isexample)\r\n   * [Learning Algorithms](#learningexample)\r\n       * [Maximum Likelihood](#mlexample)\r\n       * [Parallel Maximum Likelihood](#pmlexample)\r\n       * [Streaming Variational Bayes](#svbexample)\r\n       * [Parallel Streaming Variational Bayes](#psvbexample)\r\n   * [Concept Drift Methods](#conceptdriftexample)\r\n       * [Naive Bayes with Virtual Concept Drift Detection](#nbconceptdriftexample)\r\n   * [HuginLink](#huginglinkexample)\r\n       * [Models conversion between AMIDST and Hugin](#huginglinkconversionexample)\r\n       * [I/O of Bayesian Networks with Hugin net format](#huginglinkioexample)\r\n       * [Invoking Hugin's inference engine](#huginglinkinferenceexample)\r\n       * [Invoking Hugin's Parallel TAN](#huginglinkTANexample)\r\n   * [MoaLink](#moalinkexample)\r\n       * [AMIDST Classifiers from MOA](#moalinkclassifiersexample)\r\n       * [AMIDST Regression from MOA](#moalinkregressionsexample)\r\n\r\n\r\n## Data Streams<a name=\"datastreamsexample\"></a>\r\n  \r\nIn this example we show how to use the main features of a *DataStream* object. More precisely,  we show six different ways of iterating over the data samples of a *DataStream* object.\r\n\r\n\r\n```java\r\n//We can open the data stream using the static class DataStreamLoader\r\nDataStream<DataInstance> data = DataStreamLoader.openFromFile(\"datasets/SmallDataSet.arff\");\r\n\r\n//Access to the attributes defining the data set\r\nSystem.out.println(\"Attributes defining the data set\");\r\nfor (Attribute attribute : data.getAttributes()) {\r\n    System.out.println(attribute.getName());\r\n}\r\nAttribute attA = data.getAttributes().getAttributeByName(\"A\");\r\n\r\n//1. Iterating over samples using a for loop\r\nSystem.out.println(\"1. Iterating over samples using a for loop\");\r\nfor (DataInstance dataInstance : data) {\r\n    System.out.println(\"The value of attribute A for the current data instance is: \" +\r\n                                                          dataInstance.getValue(attA));\r\n}\r\n\r\n\r\n//2. Iterating using streams. We need to restart the data again \r\n//   as a DataStream can only be used once.\r\nSystem.out.println(\"2. Iterating using streams.\");\r\ndata.restart();\r\ndata.stream().forEach(dataInstance ->\r\n                System.out.println(\"The value of attribute A for the current data \"+\r\n                                        instance is: \" + dataInstance.getValue(attA))\r\n);\r\n\r\n\r\n//3. Iterating using parallel streams.\r\nSystem.out.println(\"3. Iterating using parallel streams.\");\r\ndata.restart();\r\ndata.parallelStream(10).forEach(dataInstance ->\r\n                System.out.println(\"The value of attribute A for the current data \"+\r\n                                        instance is: \" + dataInstance.getValue(attA))\r\n);\r\n\r\n//4. Iterating over a stream of data batches.\r\nSystem.out.println(\"4. Iterating over a stream of data batches.\");\r\ndata.restart();\r\ndata.streamOfBatches(10).forEach(batch -> {\r\n    for (DataInstance dataInstance : batch)\r\n                System.out.println(\"The value of attribute A for the current data \"+\r\n                                        instance is: \" + dataInstance.getValue(attA))\r\n});\r\n\r\n//5. Iterating over a parallel stream of data batches.\r\nSystem.out.println(\"5. Iterating over a parallel stream of data batches.\");\r\ndata.restart();\r\ndata.parallelStreamOfBatches(10).forEach(batch -> {\r\n    for (DataInstance dataInstance : batch)\r\n                System.out.println(\"The value of attribute A for the current data \"+\r\n                                        instance is: \" + dataInstance.getValue(attA))\r\n});\r\n\r\n\r\n//6. Iterating over data batches using a for loop\r\nSystem.out.println(\"6. Iterating over data batches using a for loop.\");\r\nfor (DataOnMemory<DataInstance> batch : data.iterableOverBatches(10)) {\r\n    for (DataInstance dataInstance : batch)\r\n                System.out.println(\"The value of attribute A for the current data \"+\r\n                                        instance is: \" + dataInstance.getValue(attA))\r\n}\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n## Random Variables<a name=\"variablesexample\"></a>\r\n\r\nThis example show the basic functionality of the classes Variables and Variable.\r\n\r\n```java\r\n//We first create an empty Variables object\r\nVariables variables = new Variables();\r\n\r\n//We invoke the \"new\" methods of the object Variables to create new variables.\r\n//Now we create a Gaussian variables\r\nVariable gaussianVar = variables.newGaussianVariable(\"Gaussian\");\r\n\r\n//Now we create a Multinomial variable with two states\r\nVariable multinomialVar = variables.newMultionomialVariable(\"Multinomial\", 2);\r\n\r\n//Now we create a Multinomial variable with two states: TRUE and FALSE\r\nVariable multinomialVar2 = variables.newMultionomialVariable(\"Multinomial2\", \r\n                                                Arrays.asList(\"TRUE, FALSE\"));\r\n\r\n//For Multinomial variables we can iterate over their different states\r\nFiniteStateSpace states = multinomialVar2.getStateSpaceType();\r\nstates.getStatesNames().forEach(System.out::println);\r\n\r\n//Variable objects can also be used, for example, to know if one variable \r\n//can be set as parent of some other variable\r\nSystem.out.println(\"Can a Gaussian variable be parent of Multinomial variable? \" +\r\n        (multinomialVar.getDistributionType().isParentCompatible(gaussianVar)));\r\n\r\nSystem.out.println(\"Can a Multinomial variable be parent of Gaussian variable? \" +\r\n        (gaussianVar.getDistributionType().isParentCompatible(multinomialVar)));\r\n```\r\n\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n\r\n## Bayesian Networks<a name=\"bnexample\"></a>\r\n\r\n### Creating Bayesian Networks<a name=\"bnnohiddenexample\"></a>\r\n\r\nIn this example, we take a data set, create a BN and we compute the log-likelihood of all the samples\r\nof this data set. The numbers defining the probability distributions of the BN are randomly fixed.\r\n\r\n```java\r\n//We can open the data stream using the static class DataStreamLoader\r\nDataStream<DataInstance> data = DataStreamLoader.openFromFile(\"datasets/syntheticData.arff\");\r\n\r\n\r\n/**\r\n * 1. Once the data is loaded, we create a random variable for each of the attributes (i.e. data columns)\r\n * in our data.\r\n *\r\n * 2. {@link Variables} is the class for doing that. It takes a list of Attributes and internally creates\r\n * all the variables. We create the variables using Variables class to guarantee that each variable\r\n * has a different ID number and make it transparent for the user.\r\n *\r\n * 3. We can extract the Variable objects by using the method getVariableByName();\r\n */\r\nVariables variables = new Variables(data.getAttributes());\r\n\r\nVariable a = variables.getVariableByName(\"A\");\r\nVariable b = variables.getVariableByName(\"B\");\r\nVariable c = variables.getVariableByName(\"C\");\r\nVariable d = variables.getVariableByName(\"D\");\r\nVariable e = variables.getVariableByName(\"E\");\r\nVariable g = variables.getVariableByName(\"G\");\r\nVariable h = variables.getVariableByName(\"H\");\r\nVariable i = variables.getVariableByName(\"I\");\r\n\r\n/**\r\n * 1. Once you have defined your {@link Variables} object, the next step is to create\r\n * a DAG structure over this set of variables.\r\n *\r\n * 2. To add parents to each variable, we first recover the ParentSet object by the method\r\n * getParentSet(Variable var) and then call the method addParent().\r\n */\r\nDAG dag = new DAG(variables);\r\n\r\ndag.getParentSet(e).addParent(a);\r\ndag.getParentSet(e).addParent(b);\r\n\r\ndag.getParentSet(h).addParent(a);\r\ndag.getParentSet(h).addParent(b);\r\n\r\ndag.getParentSet(i).addParent(a);\r\ndag.getParentSet(i).addParent(b);\r\ndag.getParentSet(i).addParent(c);\r\ndag.getParentSet(i).addParent(d);\r\n\r\ndag.getParentSet(g).addParent(c);\r\ndag.getParentSet(g).addParent(d);\r\n\r\n/**\r\n * 1. We first check if the graph contains cycles.\r\n *\r\n * 2. We print out the created DAG. We can check that everything is as expected.\r\n */\r\nif (dag.containCycles()) {\r\n    try {\r\n    } catch (Exception ex) {\r\n        throw new IllegalArgumentException(ex);\r\n    }\r\n}\r\n\r\nSystem.out.println(dag.toString());\r\n\r\n\r\n/**\r\n * 1. We now create the Bayesian network from the previous DAG.\r\n *\r\n * 2. The BN object is created from the DAG. It automatically looks at the distribution tye\r\n * of each variable and their parents to initialize the Distributions objects that are stored\r\n * inside (i.e. Multinomial, Normal, CLG, etc). The parameters defining these distributions are\r\n * properly initialized.\r\n *\r\n * 3. The network is printed and we can have look at the kind of distributions stored in the BN object.\r\n */\r\nBayesianNetwork bn = new BayesianNetwork(dag);\r\nSystem.out.println(bn.toString());\r\n\r\n\r\n/**\r\n * 1. We iterate over the data set sample by sample.\r\n *\r\n * 2. For each sample or DataInstance object, we compute the log of the probability that the BN object\r\n * assigns to this observation.\r\n *\r\n * 3. We accumulate these log-probs and finally we print the log-prob of the data set.\r\n */\r\ndouble logProb = 0;\r\nfor (DataInstance instance : data) {\r\n    logProb += bn.getLogProbabiltyOf(instance);\r\n}\r\nSystem.out.println(logProb);\r\n\r\nBayesianNetworkWriter.saveToFile(bn, \"networks/BNExample.bn\");\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n\r\n### Creating Bayesian Networks with latent variables <a name=\"bnhiddenexample\"></a>\r\n\r\nIn this example, we simply show how to create a BN model with hidden variables. We simply create a BN for clustering, i.e.,  a naive-Bayes like structure with a single common hidden variable acting as parant of all the observable variables.\r\n \r\n```java\r\n//We can open the data stream using the static class DataStreamLoader\r\nDataStream<DataInstance> data = DataStreamLoader.openFromFile(\"datasets/syntheticData.arff\");\r\n\r\n/**\r\n * 1. Once the data is loaded, we create a random variable for each of the attributes (i.e. data columns)\r\n * in our data.\r\n *\r\n * 2. {@link Variables} is the class for doing that. It takes a list of Attributes and internally creates\r\n * all the variables. We create the variables using Variables class to guarantee that each variable\r\n * has a different ID number and make it transparent for the user.\r\n *\r\n * 3. We can extract the Variable objects by using the method getVariableByName();\r\n */\r\nVariables variables = new Variables(data.getAttributes());\r\n\r\nVariable a = variables.getVariableByName(\"A\");\r\nVariable b = variables.getVariableByName(\"B\");\r\nVariable c = variables.getVariableByName(\"C\");\r\nVariable d = variables.getVariableByName(\"D\");\r\nVariable e = variables.getVariableByName(\"E\");\r\nVariable g = variables.getVariableByName(\"G\");\r\nVariable h = variables.getVariableByName(\"H\");\r\nVariable i = variables.getVariableByName(\"I\");\r\n\r\n/**\r\n * 1. We create the hidden variable. For doing that we make use of the method \"newMultionomialVariable\". When\r\n * a variable is created from an Attribute object, it contains all the information we need (e.g.\r\n * the name, the type, etc). But hidden variables does not have an associated attribute\r\n * and, for this reason, we use now this to provide this information.\r\n *\r\n * 2. Using the \"newMultionomialVariable\" method, we define a variable called HiddenVar, which is\r\n * not associated to any attribute and, then, it is a latent variable, its state space is a finite set with two elements, and its\r\n * distribution type is multinomial.\r\n *\r\n * 3. We finally create the hidden variable using the method \"newVariable\".\r\n */\r\n\r\nVariable hidden = variables.newMultionomialVariable(\"HiddenVar\", Arrays.asList(\"TRUE\", \"FALSE\"));\r\n\r\n/**\r\n * 1. Once we have defined your {@link Variables} object, including the latent variable,\r\n * the next step is to create a DAG structure over this set of variables.\r\n *\r\n * 2. To add parents to each variable, we first recover the ParentSet object by the method\r\n * getParentSet(Variable var) and then call the method addParent(Variable var).\r\n *\r\n * 3. We just put the hidden variable as parent of all the other variables. Following a naive-Bayes\r\n * like structure.\r\n */\r\nDAG dag = new DAG(variables);\r\n\r\ndag.getParentSet(a).addParent(hidden);\r\ndag.getParentSet(b).addParent(hidden);\r\ndag.getParentSet(c).addParent(hidden);\r\ndag.getParentSet(d).addParent(hidden);\r\ndag.getParentSet(e).addParent(hidden);\r\ndag.getParentSet(g).addParent(hidden);\r\ndag.getParentSet(h).addParent(hidden);\r\ndag.getParentSet(i).addParent(hidden);\r\n\r\n/**\r\n * We print the graph to see if is properly created.\r\n */\r\nSystem.out.println(dag.toString());\r\n\r\n/**\r\n * 1. We now create the Bayesian network from the previous DAG.\r\n *\r\n * 2. The BN object is created from the DAG. It automatically looks at the distribution type\r\n * of each variable and their parents to initialize the Distributions objects that are stored\r\n * inside (i.e. Multinomial, Normal, CLG, etc). The parameters defining these distributions are\r\n * properly initialized.\r\n *\r\n * 3. The network is printed and we can have look at the kind of distributions stored in the BN object.\r\n */\r\nBayesianNetwork bn = new BayesianNetwork(dag);\r\nSystem.out.println(bn.toString());\r\n\r\n/**\r\n * Finally teh Bayesian network is saved to a file.\r\n */\r\nBayesianNetworkWriter.saveToFile(bn, \"networks/BNHiddenExample.bn\");\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n\r\n### Modifying Bayesian Networks <a name=\"bnmodifyexample\"></a>\r\n\r\nIn this example we show how to access and modify the conditional probabilities of a Bayesian network model.\r\n\r\n```java\r\n//We first generate a Bayesian network with one multinomial, one Gaussian variable and one link.\r\nBayesianNetworkGenerator.setNumberOfGaussianVars(1);\r\nBayesianNetworkGenerator.setNumberOfMultinomialVars(1,2);\r\nBayesianNetworkGenerator.setNumberOfLinks(1);\r\n\r\nBayesianNetwork bn = BayesianNetworkGenerator.generateBayesianNetwork();\r\n\r\n//We print the randomly generated Bayesian networks\r\nSystem.out.println(bn.toString());\r\n\r\n//We first access the variable we are interested in\r\nVariable multiVar = bn.getStaticVariables().getVariableByName(\"DiscreteVar0\");\r\n\r\n//Using the above variable we can get the associated distribution and modify it\r\nMultinomial multinomial = bn.getConditionalDistribution(multiVar);\r\nmultinomial.setProbabilities(new double[]{0.2, 0.8});\r\n\r\n//Same than before but accessing the another variable\r\nVariable normalVar = bn.getStaticVariables().getVariableByName(\"GaussianVar0\");\r\n\r\n//In this case, the conditional distribtuion is of the type \"Normal given Multinomial Parents\"\r\nNormal_MultinomialParents normalMultiDist = bn.getConditionalDistribution(normalVar);\r\nnormalMultiDist.getNormal(0).setMean(1.0);\r\nnormalMultiDist.getNormal(0).setVariance(1.0);\r\n\r\nnormalMultiDist.getNormal(1).setMean(0.0);\r\nnormalMultiDist.getNormal(1).setVariance(1.0);\r\n\r\n//We print modified Bayesian network\r\nSystem.out.println(bn.toString());\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n## I/O Functionality <a name=\"ioexample\"></a>\r\n\r\n### I/O of Data Streams <a name=\"iodatastreamsexample\"></a>\r\n\r\nIn this example we show how to load and save data sets from [.arff](http://www.cs.waikato.ac.nz/ml/weka/arff.html) files. \r\n\r\n```java\r\n//We can open the data stream using the static class DataStreamLoader\r\nDataStream<DataInstance> data = DataStreamLoader.openFromFile(\"datasets/syntheticData.arff\");\r\n\r\n//We can save this data set to a new file using the static class DataStreamWriter\r\nDataStreamWriter.writeDataToFile(data, \"datasets/tmp.arff\");\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n### I/O of Bayesian Networks <a name=\"iobnsexample\"></a>\r\n\r\n\r\nIn this example we show how to load and save Bayesian networks models for a binary file with \".bn\" extension. In this toolbox Bayesian networks models are saved as serialized objects.\r\n\r\n```java\r\n//We can load a Bayesian network using the static class BayesianNetworkLoader\r\nBayesianNetwork bn = BayesianNetworkLoader.loadFromFile(\"./networks/WasteIncinerator.bn\");\r\n\r\n//Now we print the loaded model\r\nSystem.out.println(bn.toString());\r\n\r\n//Now we change the parameters of the model\r\nbn.randomInitialization(new Random(0));\r\n\r\n//We can save this Bayesian network to using the static class BayesianNetworkWriter\r\nBayesianNetworkWriter.saveToFile(bn, \"networks/tmp.bn\");\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n## Inference Algorithms <a name=\"inferenceexample\"></a>\r\n\r\n### The Inference Engine <a name=\"inferenceengingeexample\"></a>\r\n\r\nThis example show how to perform inference in a Bayesian network model using the InferenceEngine static class. This class aims to be a straigthfoward way to perform queries over a Bayesian network model. By the default the \\textit{VMP} inference method is invoked.\r\n\r\n```java\r\n//We first load the WasteIncinerator bayesian network which has multinomial \r\n//and Gaussian variables.\r\nBayesianNetwork bn = BayesianNetworkLoader.loadFromFile(\"./networks/WasteIncinerator.bn\");\r\n\r\n//We recover the relevant variables for this example: Mout which is normally \r\n//distributed, and W which is multinomial.\r\nVariable varMout = bn.getStaticVariables().getVariableByName(\"Mout\");\r\nVariable varW = bn.getStaticVariables().getVariableByName(\"W\");\r\n\r\n//Set the evidence.\r\nAssignment assignment = new HashMapAssignment(1);\r\nassignment.setValue(varW,0);\r\n\r\n//Then we query the posterior of\r\nSystem.out.println(\"P(Mout|W=0) = \" + InferenceEngine.getPosterior(varMout, bn, assignment));\r\n\r\n//Or some more refined queries\r\nSystem.out.println(\"P(0.7<Mout<6.59 | W=0) = \" + \r\n InferenceEngine.getExpectedValue(varMout, bn, v -> (0.7 < v && v < 6.59) ? 1.0 : 0.0 ));\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n### Variational Message Passing <a name=\"vmpexample\"></a>\r\n\r\nThis example we show how to perform inference on a general Bayesian network using the Variational Message Passing (VMP)\r\nalgorithm detailed in\r\n\r\n> Winn, J. M., Bishop, C. M. (2005). Variational message passing. In Journal of Machine Learning Research (pp. 661-694).\r\n\r\n\r\n\r\n```java\r\n//We first load the WasteIncinerator bayesian network which has multinomial \r\n//and Gaussian variables.\r\nBayesianNetwork bn = BayesianNetworkLoader.loadFromFile(\"./networks/WasteIncinerator.bn\");\r\n\r\n//We recover the relevant variables for this example: Mout which is normally \r\n//distributed, and W which is multinomial.\r\nVariable varMout = bn.getStaticVariables().getVariableByName(\"Mout\");\r\nVariable varW = bn.getStaticVariables().getVariableByName(\"W\");\r\n\r\n//First we create an instance of a inference algorithm. In this case, we use \r\n//the VMP class.\r\nInferenceAlgorithm inferenceAlgorithm = new VMP();\r\n\r\n//Then, we set the BN model\r\ninferenceAlgorithm.setModel(bn);\r\n\r\n//If exists, we also set the evidence.\r\nAssignment assignment = new HashMapAssignment(1);\r\nassignment.setValue(varW,0);\r\ninferenceAlgorithm.setEvidence(assignment);\r\n\r\n//Then we run inference\r\ninferenceAlgorithm.runInference();\r\n\r\n//Then we query the posterior of\r\nSystem.out.println(\"P(Mout|W=0) = \" + inferenceAlgorithm.getPosterior(varMout));\r\n\r\n//Or some more refined queries\r\nSystem.out.println(\"P(0.7<Mout<6.59 | W=0) = \" + \r\n inferenceAlgorithm.getExpectedValue(varMout, v -> (0.7 < v && v < 6.59) ? 1.0 : 0.0 ));\r\n\r\n//We can also compute the probability of the evidence\r\nSystem.out.println(\"P(W=0) = \" + Math.exp(inferenceAlgorithm.getLogProbabilityOfEvidence()));\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n### Importance Sampling <a name=\"isexample\"></a>\r\n\r\nThis example we show how to perform inference on a general Bayesian network using an importance sampling\r\nalgorithm detailed in\r\n\r\n>Fung, R., Chang, K. C. (2013). Weighing and integrating evidence for stochastic simulation in Bayesian networks. arXiv preprint arXiv:1304.1504.\r\n\r\n```java\r\n//We first load the WasteIncinerator bayesian network which has multinomial \r\n//and Gaussian variables.\r\nBayesianNetwork bn = BayesianNetworkLoader.loadFromFile(\"./networks/WasteIncinerator.bn\");\r\n\r\n//We recover the relevant variables for this example: Mout which is normally \r\n//distributed, and W which is multinomial.\r\nVariable varMout = bn.getStaticVariables().getVariableByName(\"Mout\");\r\nVariable varW = bn.getStaticVariables().getVariableByName(\"W\");\r\n\r\n//First we create an instance of a inference algorithm. In this case, we use \r\n//the ImportanceSampling class.\r\nInferenceAlgorithm inferenceAlgorithm = new ImportanceSampling();\r\n\r\n//Then, we set the BN model\r\ninferenceAlgorithm.setModel(bn);\r\n\r\n//If exists, we also set the evidence.\r\nAssignment assignment = new HashMapAssignment(1);\r\nassignment.setValue(varW,0);\r\ninferenceAlgorithm.setEvidence(assignment);\r\n\r\n//We can also set to be run in parallel on multicore CPUs\r\ninferenceAlgorithm.setParallelMode(true);\r\n\r\n//Then we run inference\r\ninferenceAlgorithm.runInference();\r\n\r\n//Then we query the posterior of\r\nSystem.out.println(\"P(Mout|W=0) = \" + inferenceAlgorithm.getPosterior(varMout));\r\n\r\n//Or some more refined queries\r\nSystem.out.println(\"P(0.7<Mout<6.59 | W=0) = \" + \r\n inferenceAlgorithm.getExpectedValue(varMout, v -> (0.7 < v && v < 6.59) ? 1.0 : 0.0 ));\r\n\r\n//We can also compute the probability of the evidence\r\nSystem.out.println(\"P(W=0) = \" + Math.exp(inferenceAlgorithm.getLogProbabilityOfEvidence()));\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n## Learning Algorithms <a name=\"learningexample\"></a>\r\n### Maximum Likelihood <a name=\"mlexample\"></a>\r\n\r\n\r\nThis other example shows how to learn incrementally the parameters of a Bayesian network using data batches,\r\n\r\n```java\r\n//We can open the data stream using the static class DataStreamLoader\r\nDataStream<DataInstance> data = \r\n                  DataStreamLoader.openFromFile(\"datasets/WasteIncineratorSample.arff\");\r\n\r\n//We create a ParameterLearningAlgorithm object with the MaximumLikehood builder\r\nParameterLearningAlgorithm parameterLearningAlgorithm = new ParallelMaximumLikelihood();\r\n\r\n//We fix the DAG structure\r\nparameterLearningAlgorithm.setDAG(getNaiveBayesStructure(data,0));\r\n\r\n//We should invoke this method before processing any data\r\nparameterLearningAlgorithm.initLearning();\r\n\r\n\r\n//Then we show how we can perform parameter learnig by a sequential updating of data batches.\r\nfor (DataOnMemory<DataInstance> batch : data.iterableOverBatches(100)){\r\n    parameterLearningAlgorithm.updateModel(batch);\r\n}\r\n\r\n//And we get the model\r\nBayesianNetwork bnModel = parameterLearningAlgorithm.getLearntBayesianNetwork();\r\n\r\n//We print the model\r\nSystem.out.println(bnModel.toString());\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n### Parallel Maximum Likelihood <a name=\"pmlexample\"></a>\r\n\r\nThis example shows how to learn in parallel the parameters of a Bayesian network from a stream of data using maximum likelihood.\r\n\r\n```java\r\n//We can open the data stream using the static class DataStreamLoader\r\nDataStream<DataInstance> data = \r\n           DataStreamLoader.openFromFile(\"datasets/syntheticData.arff\");\r\n\r\n//We create a MaximumLikelihood object with the MaximumLikehood builder\r\nMaximumLikelihood parameterLearningAlgorithm = new MaximumLikelihood();\r\n\r\n//We activate the parallel mode.\r\nparameterLearningAlgorithm.setParallelMode(true);\r\n\r\n//We fix the DAG structure\r\nparameterLearningAlgorithm.setDAG(getNaiveBayesStructure(data,0));\r\n\r\n//We set the batch size which will be employed to learn the model in parallel\r\nparameterLearningAlgorithm.setBatchSize(100);\r\n\r\n//We set the data which is going to be used for leaning the parameters\r\nparameterLearningAlgorithm.setDataStream(data);\r\n\r\n//We perform the learning\r\nparameterLearningAlgorithm.runLearning();\r\n\r\n//And we get the model\r\nBayesianNetwork bnModel = parameterLearningAlgorithm.getLearntBayesianNetwork();\r\n\r\n//We print the model\r\nSystem.out.println(bnModel.toString());\r\n```\r\n\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n### Streaming Variational Bayes <a name=\"svbexample\"></a>\r\n\r\nThis example shows how to learn incrementally the parameters of a Bayesian network from a stream of data with a Bayesian approach using the following algorithm,\r\n\r\n>Broderick, T., Boyd, N., Wibisono, A., Wilson, A. C., \\& Jordan, M. I. (2013). Streaming variational Bayes. \r\nIn Advances in Neural Information Processing Systems (pp. 1727-1735).\r\n\r\nIn this second example we show a alternative implementation which explicitly updates the model by batches by using the class *SVB*.\r\n\r\n\r\n```java\r\n//We can open the data stream using the static class DataStreamLoader\r\nDataStream<DataInstance> data = \r\n                      DataStreamLoader.openFromFile(\"datasets/WasteIncineratorSample.arff\");\r\n\r\n//We create a StreamingVariationalBayesVMP object\r\nStreamingVariationalBayesVMP parameterLearningAlgorithm = new StreamingVariationalBayesVMP();\r\n\r\n//We fix the DAG structure, which is a Naive Bayes with a \r\n//global latent binary variable\r\nparameterLearningAlgorithm.setDAG(getHiddenNaiveBayesStructure(data));\r\n\r\n//We fix the size of the window, which must be equal to the size of the data batches \r\n//we use for learning\r\nparameterLearningAlgorithm.setWindowsSize(5);\r\n\r\n//We can activate the output\r\nparameterLearningAlgorithm.setOutput(true);\r\n\r\n//We should invoke this method before processing any data\r\nparameterLearningAlgorithm.initLearning();\r\n\r\n//Then we show how we can perform parameter learnig by a sequential updating of \r\n//data batches.\r\nfor (DataOnMemory<DataInstance> batch : data.iterableOverBatches(5)){\r\n    parameterLearningAlgorithm.updateModel(batch);\r\n}\r\n\r\n//And we get the model\r\nBayesianNetwork bnModel = parameterLearningAlgorithm.getLearntBayesianNetwork();\r\n\r\n//We print the model\r\nSystem.out.println(bnModel.toString());\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n### Parallel Streaming Variational Bayes <a name=\"psvbexample\"></a>\r\n\r\nThis example shows how to learn in the parameters of a Bayesian network from a stream of data with a Bayesian\r\napproach using the parallel version  of the SVB algorithm, \r\n\r\n>Broderick, T., Boyd, N., Wibisono, A., Wilson, A. C., \\& Jordan, M. I. (2013). Streaming variational Bayes. \r\nIn Advances in Neural Information Processing Systems (pp. 1727-1735).\r\n\r\n```java\r\n//We can open the data stream using the static class DataStreamLoader\r\nDataStream<DataInstance> data = \r\n                   DataStreamLoader.openFromFile(\"datasets/WasteIncineratorSample.arff\");\r\n\r\n//We create a ParallelSVB object\r\nParallelSVB parameterLearningAlgorithm = new ParallelSVB();\r\n\r\n//We fix the number of cores we want to exploit\r\nparameterLearningAlgorithm.setNCores(4);\r\n\r\n//We fix the DAG structure, which is a Naive Bayes with a \r\n//global latent binary variable\r\nparameterLearningAlgorithm.setDAG(StreamingVMPExample.getHiddenNaiveBayesStructure(data));\r\n\r\n\r\n//We fix the size of the window\r\nparameterLearningAlgorithm.getSVBEngine().setWindowsSize(100);\r\n\r\n//We can activate the output\r\nparameterLearningAlgorithm.setOutput(true);\r\n\r\n//We set the data which is going to be used for leaning the parameters\r\nparameterLearningAlgorithm.setDataStream(data);\r\n\r\n//We perform the learning\r\nparameterLearningAlgorithm.runLearning();\r\n\r\n//And we get the model\r\nBayesianNetwork bnModel = parameterLearningAlgorithm.getLearntBayesianNetwork();\r\n\r\n//We print the model\r\nSystem.out.println(bnModel.toString());\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n## Concept Drift Methods <a name=\"conceptdriftexample\"></a>\r\n\r\n<!--- ### Maximum Likelihood with Fading <a name=\"mlfadingexample\"></a>\r\n\r\nThis example shows how to adaptively learn the parameters of a Bayesian network from a stream of data using exponential forgetting with a given fading factor, directly inspired by the approach presented in\r\n\r\n>Olesen, K. G., Lauritzen, S. L., \\& Jensen, F. V. (1992, July). aHUGIN: A system creating adaptive causal probabilistic networks. In Proceedings of the Eighth international conference on Uncertainty in Artificial Intelligence (pp. 223-229). Morgan Kaufmann Publishers Inc.\r\n\r\n```java\r\n//We can open the data stream using the static class DataStreamLoader\r\nDataStream<DataInstance> data = \r\n             DataStreamLoader.openFromFile(\"datasets/WasteIncineratorSample.arff\");\r\n\r\n//We create a ParameterLearningAlgorithm object with \r\n//the MaximumLikelihoodFading builder\r\nMaximumLikelihoodFading parameterLearningAlgorithm = new MaximumLikelihoodFading();\r\n\r\n//We fix the DAG structure\r\nparameterLearningAlgorithm.setDAG(\r\n                MaximimumLikelihoodByBatchExample.getNaiveBayesStructure(data, 0));\r\n\r\n//We fix the fading or forgeting factor\r\nparameterLearningAlgorithm.setFadingFactor(0.9);\r\n\r\n//We set the batch size which will be employed to learn the model\r\nparameterLearningAlgorithm.setBatchSize(100);\r\n\r\n//We set the data which is going to be used for leaning the parameters\r\nparameterLearningAlgorithm.setDataStream(data);\r\n\r\n//We perform the learning\r\nparameterLearningAlgorithm.runLearning();\r\n\r\n//And we get the model\r\nBayesianNetwork bnModel = parameterLearningAlgorithm.getLearntBayesianNetwork();\r\n\r\n//We print the model\r\nSystem.out.println(bnModel.toString());\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n### Streaming Variational Bayes with Fading <a name=\"svbfadingexample\"></a>\r\n\r\nThis example shows how to adaptively learn in the parameters of a Bayesian network from a stream of data with a Bayesian approach using a combination of the the following two methods,\r\n\r\n>Broderick, T., Boyd, N., Wibisono, A., Wilson, A. C., \\& Jordan, M. I. (2013). Streaming variational Bayes. \r\nIn Advances in Neural Information Processing Systems (pp. 1727-1735).\r\n\r\n>Olesen, K. G., Lauritzen, S. L., \\& Jensen, F. V. (1992, July). aHUGIN: A system creating adaptive causal probabilistic networks. In Proceedings of the Eighth international conference on Uncertainty in Artificial Intelligence (pp. 223-229). Morgan Kaufmann Publishers Inc.\r\n\r\n```java\r\n//We can open the data stream using the static class DataStreamLoader\r\nDataStream<DataInstance> data = \r\n           DataStreamLoader.openFromFile(\"datasets/WasteIncineratorSample.arff\");\r\n\r\n//We create a SVB object\r\nSVBFading parameterLearningAlgorithm = new SVBFading();\r\n\r\n//We fix the DAG structure\r\nparameterLearningAlgorithm.setDAG(SVBExample.getHiddenNaiveBayesStructure(data));\r\n\r\n//We fix the fading or forgeting factor\r\nparameterLearningAlgorithm.setFadingFactor(0.9);\r\n\r\n//We fix the size of the window\r\nparameterLearningAlgorithm.setWindowsSize(100);\r\n\r\n//We can activate the output\r\nparameterLearningAlgorithm.setOutput(true);\r\n\r\n//We set the data which is going to be used for leaning the parameters\r\nparameterLearningAlgorithm.setDataStream(data);\r\n\r\n//We perform the learning\r\nparameterLearningAlgorithm.runLearning();\r\n\r\n//And we get the model\r\nBayesianNetwork bnModel = parameterLearningAlgorithm.getLearntBayesianNetwork();\r\n\r\n//We print the model\r\nSystem.out.println(bnModel.toString());\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n-->\r\n### Naive Bayes with Virtual Concept Drift Detection <a name=\"nbconceptdriftexample\"></a>\r\n\r\nThis example shows how to use the class NaiveBayesVirtualConceptDriftDetector to run the virtual concept drift detector detailed in\r\n\r\n> Borchani et al. Modeling concept drift: A probabilistic graphical model based approach. IDA 2015.\r\n\r\n```java\r\n//We can open the data stream using the static class DataStreamLoader\r\nDataStream<DataInstance> data = DataStreamLoader.openFromFile(\"./datasets/DriftSets/sea.arff\");\r\n\r\n//We create a NaiveBayesVirtualConceptDriftDetector object\r\nNaiveBayesVirtualConceptDriftDetector virtualDriftDetector = \r\n                                        new NaiveBayesVirtualConceptDriftDetector();\r\n\r\n//We set class variable as the last attribute\r\nvirtualDriftDetector.setClassIndex(-1);\r\n\r\n//We set the data which is going to be used\r\nvirtualDriftDetector.setData(data);\r\n\r\n//We fix the size of the window\r\nint windowSize = 1000;\r\nvirtualDriftDetector.setWindowsSize(windowSize);\r\n\r\n//We fix the so-called transition variance\r\nvirtualDriftDetector.setTransitionVariance(0.1);\r\n\r\n//We fix the number of global latent variables\r\nvirtualDriftDetector.setNumberOfGlobalVars(1);\r\n\r\n//We should invoke this method before processing any data\r\nvirtualDriftDetector.initLearning();\r\n\r\n//Some prints\r\nSystem.out.print(\"Batch\");\r\nfor (Variable hiddenVar : virtualDriftDetector.getHiddenVars()) {\r\n    System.out.print(\"\\t\" + hiddenVar.getName());\r\n}\r\nSystem.out.println();\r\n\r\n\r\n//Then we show how we can perform the sequential processing of\r\n// data batches. They must be of the same value than the window\r\n// size parameter set above.\r\nint countBatch = 0;\r\nfor (DataOnMemory<DataInstance> batch : \r\n\t\t\t\tdata.iterableOverBatches(windowSize)){\r\n\r\n    //We update the model by invoking this method. The output\r\n    // is an array with a value associated\r\n    // to each fo the global hidden variables\r\n    double[] out = virtualDriftDetector.updateModel(batch);\r\n\r\n    //We print the output\r\n    System.out.print(countBatch + \"\\t\");\r\n    for (int i = 0; i < out.length; i++) {\r\n        System.out.print(out[i]+\"\\t\");\r\n    }\r\n    System.out.println();\r\n    countBatch++;\r\n}\r\n```\r\n\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n## HuginLink <a name=\"huginglinkexample\"></a>\r\n### Models conversion between AMIDST and Hugin <a name=\"huginglinkconversionexample\"></a>\r\n\r\nThis example shows how to use the class BNConverterToAMIDST and BNConverterToHugin to convert a \r\nBayesian network models between Hugin and AMIDST formats\r\n\r\n\r\n```java\r\n//We load from Hugin format\r\nDomain huginBN = BNLoaderFromHugin.loadFromFile(\"networks/asia.net\");\r\n\r\n//Then, it is converted to AMIDST BayesianNetwork object\r\nBayesianNetwork amidstBN = BNConverterToAMIDST.convertToAmidst(huginBN);\r\n\r\n//Then, it is converted to Hugin Bayesian Network object\r\nhuginBN = BNConverterToHugin.convertToHugin(amidstBN);\r\n\r\nSystem.out.println(amidstBN.toString());\r\nSystem.out.println(huginBN.toString());\r\n```\r\n\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n### I/O of Bayesian Networks with Hugin net format <a name=\"huginglinkioexample\"></a>\r\n\r\nThis example shows how to use the class BNLoaderFromHugin and BNWriterToHugin classes to load and\r\nwrite Bayesian networks in Hugin format.\r\n\r\n```java\r\n//We load from Hugin format\r\nDomain huginBN = BNLoaderFromHugin.loadFromFile(\"networks/asia.net\");\r\n\r\n//We save a AMIDST BN to Hugin format\r\nBayesianNetwork amidstBN = BNConverterToAMIDST.convertToAmidst(huginBN);\r\nBNWriterToHugin.saveToHuginFile(amidstBN,\"networks/tmp.net\");\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n### Invoking Hugin's inference engine <a name=\"huginglinkinferenceexample\"></a>\r\n\r\nThis example we show how to perform inference using [Hugin](http://www.hugin.com) inference engine within the AMIDST toolbox\r\n\r\n```java\r\n//We first load the WasteIncinerator bayesian network \r\n//which has multinomial and Gaussian variables.\r\nBayesianNetwork bn = BayesianNetworkLoader.loadFromFile(\"./networks/WasteIncinerator.bn\");\r\n\r\n//We recover the relevant variables for this example: \r\n//Mout which is normally distributed, and W which is multinomial.\r\nVariable varMout = bn.getStaticVariables().getVariableByName(\"Mout\");\r\nVariable varW = bn.getStaticVariables().getVariableByName(\"W\");\r\n\r\n//First we create an instance of a inference algorithm. \r\n//In this case, we use the ImportanceSampling class.\r\nInferenceAlgorithm inferenceAlgorithm = new HuginInference();\r\n\r\n//Then, we set the BN model\r\ninferenceAlgorithm.setModel(bn);\r\n\r\n//If exists, we also set the evidence.\r\nAssignment assignment = new HashMapAssignment(1);\r\nassignment.setValue(varW,0);\r\ninferenceAlgorithm.setEvidence(assignment);\r\n\r\n//Then we run inference\r\ninferenceAlgorithm.runInference();\r\n\r\n//Then we query the posterior of\r\nSystem.out.println(\"P(Mout|W=0) = \" + inferenceAlgorithm.getPosterior(varMout));\r\n\r\n//Or some more refined queries\r\nSystem.out.println(\"P(0.7<Mout<3.5 | W=0) = \" \r\n   + inferenceAlgorithm.getExpectedValue(varMout, v -> (0.7 < v && v < 3.5) ? 1.0 : 0.0 ));\r\n```\r\n\r\n[[Back to Top]](#documentation)\r\n\r\n### Invoking Hugin's Parallel TAN <a name=\"huginglinkTANexample\"></a>\r\n\r\nThis example we show how to perform inference using [Hugin](http://www.hugin.com) inference engine within the AMIDST toolbox\r\n\r\n\r\nThis example shows how to use [Hugin](http://www.hugin.com)'s functionality to learn in parallel a TAN model. An important remark is that [Hugin](http://www.hugin.com) only allows to learn the TAN model for a data set completely loaded into RAM memory. The case where our data set does not fit into memory, it solved in AMIDST in the following way. We learn the structure using a smaller data set produced by [Reservoir sampling](https://en.wikipedia.org/wiki/Reservoir_sampling) and, then, we use AMIDST's [ParallelMaximumLikelihood](http://amidst.github.io/toolbox/#pmlexample) to learn the parameters of the TAN model over the whole data set.\r\n\r\nFor further details about the implementation of the parallel TAN algorithm look at the following paper:\r\n\r\n>Madsen, A.L. et al. A New Method for Vertical Parallelisation of TAN Learning Based on Balanced Incomplete Block Designs. Probabilistic Graphical Models. Lecture Notes in Computer Science Volume 8754, 2014, pp 302-317.\r\n\r\n```java\r\n//We load a Bayesian network to generate a data stream\r\n//using BayesianNewtorkSampler class.\r\nint sampleSize = 100000;\r\nBayesianNetwork bn = BayesianNetworkLoader.loadFromFile(\"networks/Pigs.bn\");\r\nBayesianNetworkSampler sampler = new BayesianNetworkSampler(bn);\r\n\r\n//We fix the number of samples in memory used for performing the structural learning.\r\n//They are randomly sub-sampled using Reservoir sampling.\r\nint samplesOnMemory = 5000;\r\n\r\n//We make different trials with different number of cores\r\nArrayList<Integer> vNumCores = new ArrayList(Arrays.asList(1, 2, 3, 4));\r\n\r\nfor (Integer numCores : vNumCores) {\r\n    System.out.println(\"Learning TAN: \" + samplesOnMemory + \" samples on memory, \" + numCores + \" core/s ...\");\r\n    DataStream<DataInstance> data = sampler.sampleToDataStream(sampleSize);\r\n\r\n    //The class ParallelTAN is created\r\n    ParallelTAN tan = new ParallelTAN();\r\n\r\n    //We activate the parallel mode.\r\n    tan.setParallelMode(true);\r\n\r\n    //We set the number of cores to be used for the structural learning\r\n    tan.setNumCores(numCores);\r\n\r\n    //We set the number of samples to be used for the learning the structure\r\n    tan.setNumSamplesOnMemory(samplesOnMemory);\r\n\r\n    //We set the root variable to be first variable\r\n    tan.setNameRoot(bn.getVariables().getListOfVariables().get(0).getName());\r\n\r\n    //We set the class variable to be the last variable\r\n    tan.setNameTarget(bn.getVariables().getListOfVariables().get(bn.getVariables().getListOfVariables().size()-1).getName());\r\n\r\n    Stopwatch watch = Stopwatch.createStarted();\r\n\r\n    //We just invoke this mode to learn the TAN model for the data stream\r\n    BayesianNetwork model = tan.learn(data);\r\n\r\n    System.out.println(watch.stop());\r\n}\r\n```\r\n\r\n\r\n## MoaLink <a name=\"moalinkexample\"></a>\r\n### AMIDST Classifiers from MOA <a name=\"moalinkclassifiersexample\"></a>\r\n\r\nThe following command can be used to learn a Bayesian model with a latent Gaussian variable (HG) and a multinomial with 2 states (HM), as displayed in figure below. The VMP algorithm is used to learn the parameters of these two non-observed variables and make predictions over the class variable.\r\n\r\n\r\n<p align=\"center\">\r\n<img title=\"Taxonomy\" src=\"http://amidst.github.io/toolbox/images/HODE.jpg\" width=\"400\">\r\n</p>\r\n\r\n```\r\njava -Xmx512m -cp \"../lib/*\" -javaagent:../lib/sizeofag-1.0.0.jar \r\nmoa.DoTask EvaluatePrequential -l \\(bayes.AmidstClassifier -g 1 \r\n-m 2\\) -s generators.RandomRBFGenerator -i 10000 -f 1000 -q 1000\r\n```\r\n[[Back to Top]](#documentation)\r\n\r\n### AMIDST Regression from MOA <a name=\"moalinkregressionsexample\"></a>\r\n\r\nIt is possible to learn an enriched naive Bayes model for regression if the class label is of a continuous nature. The following command uses the model in Figure \\ref{fig:HODE}(b) on a toy dataset from WEKA's collection of [regression problems](http://prdownloads.sourceforge.net/weka/datasets-numeric.jar).\r\n\r\n\r\n<p align=\"center\">\r\n<img title=\"Taxonomy\" src=\"http://amidst.github.io/toolbox/images/regressionHODE.jpg\" width=\"400\">\r\n</p>\r\n\r\n\r\n```\r\njava -Xmx512m -cp \"../lib/*\" -javaagent:../lib/sizeofag-1.0.0.jar \r\nmoa.DoTask EvaluatePrequentialRegression -l bayes.AmidstRegressor\r\n -s (ArffFileStream -f ./quake.arff)\r\n```\r\n\r\nNote that the simpler the dataset the less complex the model should be. In this case, \\texttt{quake.arff} is a very simple and small dataset that should probably be learn with a more simple classifier, that is, a high-bias-low-variance classifier, in order to avoid overfitting. This aims at providing a simple running example.\r\n\r\n[[Back to Top]](#documentation)","google":"UA-66233470-1","note":"Don't delete this file! It's used internally to help with page regeneration."}